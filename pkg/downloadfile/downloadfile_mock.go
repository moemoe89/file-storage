// Code generated by MockGen. DO NOT EDIT.
// Source: downloadfile.go

// Package downloadfile is a generated GoMock package.
package downloadfile

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// GoMockDownloadFile is a mock of DownloadFile interface.
type GoMockDownloadFile struct {
	ctrl     *gomock.Controller
	recorder *GoMockDownloadFileMockRecorder
}

// GoMockDownloadFileMockRecorder is the mock recorder for GoMockDownloadFile.
type GoMockDownloadFileMockRecorder struct {
	mock *GoMockDownloadFile
}

// NewGoMockDownloadFile creates a new mock instance.
func NewGoMockDownloadFile(ctrl *gomock.Controller) *GoMockDownloadFile {
	mock := &GoMockDownloadFile{ctrl: ctrl}
	mock.recorder = &GoMockDownloadFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockDownloadFile) EXPECT() *GoMockDownloadFileMockRecorder {
	return m.recorder
}

// DownloadByte mocks base method.
func (m *GoMockDownloadFile) DownloadByte(ctx context.Context, targetURL string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadByte", ctx, targetURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadByte indicates an expected call of DownloadByte.
func (mr *GoMockDownloadFileMockRecorder) DownloadByte(ctx, targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadByte", reflect.TypeOf((*GoMockDownloadFile)(nil).DownloadByte), ctx, targetURL)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}
