// Code generated by MockGen. DO NOT EDIT.
// Source: file_storage_uc.go

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cloudstorage "github.com/moemoe89/file-storage/pkg/cloudstorage"
)

// GoMockFileStorageUsecase is a mock of FileStorageUsecase interface.
type GoMockFileStorageUsecase struct {
	ctrl     *gomock.Controller
	recorder *GoMockFileStorageUsecaseMockRecorder
}

// GoMockFileStorageUsecaseMockRecorder is the mock recorder for GoMockFileStorageUsecase.
type GoMockFileStorageUsecaseMockRecorder struct {
	mock *GoMockFileStorageUsecase
}

// NewGoMockFileStorageUsecase creates a new mock instance.
func NewGoMockFileStorageUsecase(ctrl *gomock.Controller) *GoMockFileStorageUsecase {
	mock := &GoMockFileStorageUsecase{ctrl: ctrl}
	mock.recorder = &GoMockFileStorageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockFileStorageUsecase) EXPECT() *GoMockFileStorageUsecaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *GoMockFileStorageUsecase) Delete(ctx context.Context, bucket, object string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, bucket, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *GoMockFileStorageUsecaseMockRecorder) Delete(ctx, bucket, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*GoMockFileStorageUsecase)(nil).Delete), ctx, bucket, object)
}

// List mocks base method.
func (m *GoMockFileStorageUsecase) List(ctx context.Context, bucket string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, bucket)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *GoMockFileStorageUsecaseMockRecorder) List(ctx, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*GoMockFileStorageUsecase)(nil).List), ctx, bucket)
}

// Upload mocks base method.
func (m *GoMockFileStorageUsecase) Upload(ctx context.Context, file io.Reader, bucket, object string, expires time.Time) (*cloudstorage.CloudFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, file, bucket, object, expires)
	ret0, _ := ret[0].(*cloudstorage.CloudFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *GoMockFileStorageUsecaseMockRecorder) Upload(ctx, file, bucket, object, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*GoMockFileStorageUsecase)(nil).Upload), ctx, file, bucket, object, expires)
}
